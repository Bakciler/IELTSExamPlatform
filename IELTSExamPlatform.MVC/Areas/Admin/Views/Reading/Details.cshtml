@model IELTSExamPlatform.BL.DTOs.Reading.GET.ReadingDto

<div class="container-fluid">
    <h1 class="h3 mb-4 text-gray-800">Reading Details & Update</h1>

    <div class="card shadow mb-4">
        <div class="card-body">
            <form id="readingUpdateForm">
                @Html.AntiForgeryToken()
                <input type="hidden" name="Id" value="@Model.Id" />
                <div class="d-flex justify-content-between align-items-center mb-3">
                    <h1 class="h3 mb-0 text-gray-800">Reading Details</h1>
                    <a asp-area="Admin" asp-controller="Reading" asp-action="Index" class="btn btn-outline-secondary">
                        <i class="fas fa-arrow-left"></i> Geri qayıt
                    </a>
                </div>

                <!-- Reading Title -->
                <div class="mb-4 border p-3 rounded bg-white shadow-sm">
                    <h5 class="text-primary fw-bold mb-3">Reading Title</h5>
                    <div class="mb-2">
                        <label class="form-label fw-bold text-secondary">Title</label>
                        <input type="text" name="Title" class="form-control" value="@Model.Title" placeholder="Enter reading title..." />
                    </div>
                </div>

                <!-- Passages -->
                <div id="passagesContainer">
                    @for (int i = 0; i < Model.ReadingPassages.Count; i++)
                    {
                        var passage = Model.ReadingPassages[i];
                        <div class="mb-4 border p-3 rounded bg-light passage-block" data-existing="true">
                            <input type="hidden" name="ReadingPassages[@i].Id" value="@passage.Id" />

                            <div class="mb-2">
                                <label class="form-label">Title</label>
                                <input type="text" name="ReadingPassages[@i].Title" class="form-control" value="@passage.Title" />
                            </div>

                            <div class="mb-2">
                                <label class="form-label">Description</label>
                                <textarea name="ReadingPassages[@i].Description" class="form-control" rows="2">@passage.Description</textarea>
                            </div>

                            <h5>Paragraphs</h5>
                            <div class="paragraphs-container">
                                @for (int j = 0; j < passage.ReadingParagrahs.Count; j++)
                                {
                                    var paragraph = passage.ReadingParagrahs[j];
                                    <div class="mb-3 p-2 border rounded paragraph-block" data-existing="true">
                                        <input type="hidden" name="ReadingPassages[@i].ReadingParagrahs[@j].Id" value="@paragraph.Id" />
                                        <div class="d-flex gap-2 align-items-start">
                                            <input type="text"
                                                   name="ReadingPassages[@i].ReadingParagrahs[@j].Key"
                                                   class="form-control paragraph-key"
                                                   maxlength="1"
                                                   style="width:60px;"
                                                   value="@paragraph.Key"
                                                   placeholder="A" />
                                            <textarea name="ReadingPassages[@i].ReadingParagrahs[@j].Content"
                                                      class="form-control paragraph-content"
                                                      rows="3">@paragraph.Content</textarea>
                                            <button type="button" class="btn btn-danger btn-sm delete-paragraph-btn">Delete</button>
                                        </div>
                                    </div>
                                }
                            </div>

                            <button type="button" class="btn btn-outline-primary btn-sm add-paragraph-btn mt-2">
                                <i class="fas fa-plus"></i> Add Paragraph
                            </button>
                            <button type="button" class="btn btn-outline-danger btn-sm delete-passage-btn mt-2">Delete Passage</button>
                        </div>
                    }
                </div>

                <!-- Buttons -->
                <div class="d-flex justify-content-between mt-3">
                    <button type="button" id="addPassageBtn" class="btn btn-outline-secondary">
                        <i class="fas fa-plus"></i> Add Passage
                    </button>

                    <button type="submit" class="btn btn-success">
                        <i class="fas fa-save me-1"></i> Save Changes
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        const passagesContainer = document.getElementById('passagesContainer');
        const addPassageBtn = document.getElementById('addPassageBtn');

        function updateIndexes() {
            const passageBlocks = passagesContainer.querySelectorAll('.passage-block');
            passageBlocks.forEach((passage, i) => {
                passage.querySelectorAll('input, textarea').forEach(input => {
                    if (input.name.includes('ReadingPassages')) {
                        input.name = input.name.replace(/ReadingPassages\[\d+\]/, `ReadingPassages[${i}]`);
                    }
                });

                const paragraphBlocks = passage.querySelectorAll('.paragraph-block');
                paragraphBlocks.forEach((para, j) => {
                    para.querySelectorAll('input, textarea').forEach(input => {
                        if (input.name.includes('ReadingParagrahs')) {
                            input.name = input.name.replace(/ReadingParagrahs\[\d+\]/, `ReadingParagrahs[${j}]`);
                        }
                    });
                });
            });
        }

        // Paragraph əlavə et
        function attachParagraphEvents() {
            document.querySelectorAll('.add-paragraph-btn').forEach(btn => {
                btn.onclick = () => {
                    const passageBlock = btn.closest('.passage-block');
                    const paragraphsContainer = passageBlock.querySelector('.paragraphs-container');
                    const newParagraphHtml = `
                        <div class="mb-3 p-2 border rounded paragraph-block" data-existing="false">
                            <input type="hidden" value="00000000-0000-0000-0000-000000000000" />
                            <div class="d-flex gap-2 align-items-start">
                                <input type="text" class="form-control paragraph-key" maxlength="1" style="width:60px;" placeholder="A" />
                                <textarea class="form-control paragraph-content" rows="3" placeholder="Enter paragraph content..."></textarea>
                                <button type="button" class="btn btn-danger btn-sm remove-paragraph-btn">Cancel</button>
                            </div>
                        </div>
                    `;
                    paragraphsContainer.insertAdjacentHTML('beforeend', newParagraphHtml);
                    attachParagraphCancelEvents();
                    updateIndexes();
                };
            });
            attachParagraphDeleteEvents();
        }

        function attachParagraphCancelEvents() {
            document.querySelectorAll('.remove-paragraph-btn').forEach(btn => {
                btn.onclick = () => {
                    const paragraphBlock = btn.closest('.paragraph-block');
                    paragraphBlock.remove();
                    updateIndexes();
                };
            });
        }

        function attachPassageDeleteEvents() {
            document.querySelectorAll('.delete-passage-btn').forEach(btn => {
                btn.onclick = () => {
                    const passageBlock = btn.closest('.passage-block');
                    passageBlock.dataset.deleted = "true";
                    passageBlock.style.display = "none";
                };
            });
        }

        function attachParagraphDeleteEvents() {
            document.querySelectorAll('.delete-paragraph-btn').forEach(btn => {
                btn.onclick = () => {
                    const paraBlock = btn.closest('.paragraph-block');
                    paraBlock.dataset.deleted = "true";
                    paraBlock.style.display = "none";
                };
            });
        }

        // ✅ Add Passage düyməsi – maksimum 3 passage
        addPassageBtn.addEventListener('click', () => {
            const currentPassages = passagesContainer.querySelectorAll('.passage-block');

            if (currentPassages.length >= 3) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Limit reached',
                    text: 'You can only create up to 3 passages for one reading.',
                    toast: true,
                    position: 'top-end',
                    showConfirmButton: false,
                    timer: 2500,
                    timerProgressBar: true
                });
                return;
            }

            const newPassageHtml = `
                <div class="mb-4 border p-3 rounded bg-light passage-block" data-existing="false">
                    <input type="hidden" value="00000000-0000-0000-0000-000000000000" />
                    <div class="mb-2">
                        <label class="form-label">Title</label>
                        <input type="text" class="form-control" placeholder="Enter passage title..." />
                    </div>
                    <div class="mb-2">
                        <label class="form-label">Description</label>
                        <textarea class="form-control" rows="2" placeholder="Enter description..."></textarea>
                    </div>
                    <h5>Paragraphs</h5>
                    <div class="paragraphs-container"></div>
                    <button type="button" class="btn btn-outline-primary btn-sm add-paragraph-btn mt-2">Add Paragraph</button>
                    <button type="button" class="btn btn-outline-danger btn-sm remove-passage-btn mt-2">Cancel</button>
                </div>
            `;
            passagesContainer.insertAdjacentHTML('beforeend', newPassageHtml);
            attachParagraphEvents();
            attachPassageCancelEvents(); // ✅ yeni əlavə
            updateIndexes();
        });

        // Passage Cancel düyməsini attach et
        function attachPassageCancelEvents() {
            document.querySelectorAll('.remove-passage-btn').forEach(btn => {
                btn.onclick = () => {
                    const passageBlock = btn.closest('.passage-block');
                    passageBlock.remove();
                    updateIndexes();
                };
            });
        }

        // İlk attach
        attachParagraphEvents();
        attachParagraphCancelEvents();
        attachPassageDeleteEvents();
        attachParagraphDeleteEvents();

        // Form submit JSON
        document.getElementById('readingUpdateForm').addEventListener('submit', async function(e){
            e.preventDefault();
            const readingId = document.querySelector('input[name="Id"]').value;
            const updatedReading = { Title: document.querySelector('input[name="Title"]').value, Passages: [] };

            document.querySelectorAll('.passage-block').forEach((passage) => {
                if (passage.dataset.deleted === "true") return;

                const passageIdInput = passage.querySelector('input[type="hidden"]');
                const titleInput = passage.querySelector('input[type="text"]');
                const descInput = passage.querySelector('textarea');

                const paragraphs = [];
                passage.querySelectorAll('.paragraph-block').forEach((para) => {
                    if (para.dataset.deleted === "true") return;
                    const keyInput = para.querySelector('.paragraph-key');
                    const contentInput = para.querySelector('.paragraph-content');
                    paragraphs.push({
                        Id: para.querySelector('input[type="hidden"]')?.value || "00000000-0000-0000-0000-000000000000",
                        Key: keyInput.value,
                        Content: contentInput.value
                    });
                });

                updatedReading.Passages.push({
                    Id: passageIdInput?.value || "00000000-0000-0000-0000-000000000000",
                    Title: titleInput.value,
                    Description: descInput.value,
                    Paragraphs: paragraphs
                });
            });

            console.log('Göndəriləcək JSON:', updatedReading);

            const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
            const response = await fetch(`/Admin/Reading/Update/${readingId}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': token
                },
                body: JSON.stringify(updatedReading)
            });
            const result = await response.json();

            if (result.success) {
                localStorage.setItem("successMessage", "Uğurla yadda saxlanıldı!");
                window.location.href = result.redirectUrl;
            } else {
                Swal.fire("Xəta!", result.message, "error");
            }
        });
    });
</script>




