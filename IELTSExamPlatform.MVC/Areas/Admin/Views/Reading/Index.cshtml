@using IELTSExamPlatform.BL.DTOs.Reading.GET
@model List<ReadingDto>

@{
    ViewData["Title"] = "Reading List";
}

<div class="container-fluid">
    <h1 class="h3 mb-4 text-gray-800">Reading List</h1>

    <div class="card shadow mb-4">
        <div class="card-header py-3 d-flex justify-content-between align-items-center">
            <h6 class="m-0 font-weight-bold text-primary">Readings</h6>
            <a asp-controller="Reading" asp-action="Create" class="btn btn-sm btn-primary">
                <i class="fas fa-plus"></i> Create
            </a>
        </div>

        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-bordered table-hover" id="readingsTable">
                    <thead class="thead-light">
                        <tr>
                            <th>#</th>
                            <th>Title</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @for (int i = 0; i < Model.Count; i++)
                        {
                            var reading = Model[i];
                            <tr>
                                <td>@reading.Id</td>
                                <td>@reading.Title</td>
                                <td>
                                    <button class="btn btn-sm btn-info view-reading-btn"
                                            data-reading-index="@i">
                                        <i class="fas fa-eye"></i> View
                                    </button>                                    
                                    <a asp-area="Admin" asp-controller="Reading" asp-action="Details" asp-route-id="@reading.Id"
                                       class="btn btn-sm btn-secondary">
                                        <i class="fas fa-info-circle"></i> Details
                                    </a>
                                    <a asp-area="Admin" asp-controller="Reading" asp-action="QuestionCreateIndex" asp-route-id="@reading.Id"
                                       class="btn btn-sm btn-secondary">
                                        <i class="fas fa-info-circle"></i> Add Question
                                    </a>
                                    <button class="btn btn-sm btn-danger delete-reading-btn"
                                            data-reading-index="@i">
                                        <i class="fas fa-trash"></i> Delete
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<!-- Modal -->
<div class="modal fade" id="readingModal" tabindex="-1" aria-labelledby="readingModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title" id="readingModalLabel">
                    <i class="fas fa-book-open me-2"></i> Reading Content
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body bg-light">
                <div id="readingModalContent">
                    <!-- Reading content will be populated here -->
                </div>
            </div>
        </div>
    </div>
</div>

@section scripts {
    <style>
        .reading-content {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            color: #333;
        }

            .reading-content h2 {
                text-align: center;
                color: #6a1b9a;
                font-weight: bold;
                margin-bottom: 0.5rem;
            }

            .reading-content h5.subtitle {
                text-align: center;
                font-style: italic;
                color: #555;
                margin-bottom: 2rem;
            }

        .paragraph-with-key {
            display: flex;
            align-items: flex-start;
            margin-bottom: 1.5rem;
        }

        .key-badge {
            font-size: 1.2rem;
            font-weight: bold;
            color: #6a1b9a;
            background: none;
            border: none;
            padding: 0;
            margin-right: 1rem;
        }

        .paragraph-text {
            flex: 1;
        }

            .paragraph-text p {
                margin: 0;
                line-height: 1.6;
                text-align: justify;
            }

        .paragraph-no-key p {
            margin-bottom: 1rem;
            line-height: 1.6;
            text-align: justify;
        }
    </style>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        const readings = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model));

        const modal = new bootstrap.Modal(document.getElementById('readingModal'));
        const modalContent = document.getElementById('readingModalContent');

        document.querySelectorAll('.view-reading-btn').forEach(btn => {
            btn.addEventListener('click', () => {
                const index = btn.getAttribute('data-reading-index');
                const reading = readings[index];

                let html = `<div class="reading-content">`;

                reading.ReadingPassages.forEach(passage => {
                    html += `<h2>${passage.Title || "Reading Title"}</h2>`;
                    if (passage.Description) {
                        html += `<h5 class="subtitle">${passage.Description}</h5>`;
                    }

                    passage.ReadingParagrahs.forEach(paragraph => {
                        html += paragraph.Key ? `
                            <div class="paragraph-with-key">
                                <span class="key-badge">${paragraph.Key}</span>
                                <div class="paragraph-text">
                                    <p>${paragraph.Content}</p>
                                </div>
                            </div>
                        ` : `<div class="paragraph-no-key"><p>${paragraph.Content}</p></div>`;
                    });
                });

                html += `</div>`;
                modalContent.innerHTML = html;
                modal.show();
            });
        });

        // Manual close (sag ustdeki X)
        document.querySelector('.btn-close').addEventListener('click', () => {
            modal.hide();
        });
    </script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const message = localStorage.getItem("successMessage");
            if (message) {
                Swal.fire({
                    toast: true,
                    position: 'top-end',
                    icon: 'success',
                    title: message,
                    showConfirmButton: false,
                    timer: 3000,
                    timerProgressBar: true
                });
                localStorage.removeItem("successMessage");
            }
        });
    </script>


}
