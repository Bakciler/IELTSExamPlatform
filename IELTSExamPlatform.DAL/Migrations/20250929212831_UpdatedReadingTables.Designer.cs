// <auto-generated />
using System;
using IELTSExamPlatform.DAL.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace IELTSExamPlatform.DAL.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250929212831_UpdatedReadingTables")]
    partial class UpdatedReadingTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("IELTSExamPlatform.CORE.Entities.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("IELTSExamPlatform.CORE.Entities.Blank", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CorrectAnswer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<Guid>("SentenceId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("SentenceId");

                    b.ToTable("Blanks");
                });

            modelBuilder.Entity("IELTSExamPlatform.CORE.Entities.Common.ReadingQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("QuestionType")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)");

                    b.Property<Guid>("ReadingPassageId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("ReadingQuestions");

                    b.HasDiscriminator<string>("QuestionType").HasValue("ReadingQuestion");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("IELTSExamPlatform.CORE.Entities.Heading", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReadingPassageId")
                        .HasColumnType("uuid");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ReadingPassageId");

                    b.ToTable("Headings");
                });

            modelBuilder.Entity("IELTSExamPlatform.CORE.Entities.QuestionOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChoiceQuestionId")
                        .HasColumnType("uuid");

                    b.Property<char>("Code")
                        .HasColumnType("character(1)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ChoiceQuestionId");

                    b.ToTable("QuestionOptions");
                });

            modelBuilder.Entity("IELTSExamPlatform.CORE.Entities.Reading", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Readings");
                });

            modelBuilder.Entity("IELTSExamPlatform.CORE.Entities.ReadingParagraphs", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<char>("Key")
                        .HasColumnType("character(1)");

                    b.Property<Guid>("ReadingPassageId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ReadingPassageId");

                    b.ToTable("ReadingParagraphs");
                });

            modelBuilder.Entity("IELTSExamPlatform.CORE.Entities.ReadingPassage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReadingId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ReadingId");

                    b.ToTable("ReadingPassages");
                });

            modelBuilder.Entity("IELTSExamPlatform.CORE.Entities.Sentence", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FillInTheBlankId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FillInTheBlankId1")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("FillInTheBlankId");

                    b.HasIndex("FillInTheBlankId1");

                    b.ToTable("Sentences");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("IELTSExamPlatform.CORE.Entities.BooleanQuestion", b =>
                {
                    b.HasBaseType("IELTSExamPlatform.CORE.Entities.Common.ReadingQuestion");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CorrectAnswer")
                        .HasColumnType("integer");

                    b.HasIndex("ReadingPassageId");

                    b.HasDiscriminator().HasValue("Boolean");
                });

            modelBuilder.Entity("IELTSExamPlatform.CORE.Entities.ChoiceQuestion", b =>
                {
                    b.HasBaseType("IELTSExamPlatform.CORE.Entities.Common.ReadingQuestion");

                    b.HasIndex("ReadingPassageId");

                    b.HasDiscriminator().HasValue("Choice");
                });

            modelBuilder.Entity("IELTSExamPlatform.CORE.Entities.FillInTheBlank", b =>
                {
                    b.HasBaseType("IELTSExamPlatform.CORE.Entities.Common.ReadingQuestion");

                    b.HasIndex("ReadingPassageId");

                    b.HasDiscriminator().HasValue("FillInTheBlank");
                });

            modelBuilder.Entity("IELTSExamPlatform.CORE.Entities.MatchHeadingsQuestion", b =>
                {
                    b.HasBaseType("IELTSExamPlatform.CORE.Entities.Common.ReadingQuestion");

                    b.Property<Guid>("HeadingId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasIndex("HeadingId");

                    b.HasIndex("ReadingPassageId");

                    b.HasDiscriminator().HasValue("MatchHeading");
                });

            modelBuilder.Entity("IELTSExamPlatform.CORE.Entities.Blank", b =>
                {
                    b.HasOne("IELTSExamPlatform.CORE.Entities.Sentence", "Sentence")
                        .WithMany("Blanks")
                        .HasForeignKey("SentenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sentence");
                });

            modelBuilder.Entity("IELTSExamPlatform.CORE.Entities.Heading", b =>
                {
                    b.HasOne("IELTSExamPlatform.CORE.Entities.ReadingPassage", "ReadingPassage")
                        .WithMany("Headings")
                        .HasForeignKey("ReadingPassageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReadingPassage");
                });

            modelBuilder.Entity("IELTSExamPlatform.CORE.Entities.QuestionOption", b =>
                {
                    b.HasOne("IELTSExamPlatform.CORE.Entities.ChoiceQuestion", "ChoiceQuestion")
                        .WithMany("QuestionOptions")
                        .HasForeignKey("ChoiceQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChoiceQuestion");
                });

            modelBuilder.Entity("IELTSExamPlatform.CORE.Entities.ReadingParagraphs", b =>
                {
                    b.HasOne("IELTSExamPlatform.CORE.Entities.ReadingPassage", "ReadingPassage")
                        .WithMany("ReadingParagrahs")
                        .HasForeignKey("ReadingPassageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReadingPassage");
                });

            modelBuilder.Entity("IELTSExamPlatform.CORE.Entities.ReadingPassage", b =>
                {
                    b.HasOne("IELTSExamPlatform.CORE.Entities.Reading", "Reading")
                        .WithMany("ReadingPassages")
                        .HasForeignKey("ReadingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reading");
                });

            modelBuilder.Entity("IELTSExamPlatform.CORE.Entities.Sentence", b =>
                {
                    b.HasOne("IELTSExamPlatform.CORE.Entities.Common.ReadingQuestion", null)
                        .WithMany()
                        .HasForeignKey("FillInTheBlankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IELTSExamPlatform.CORE.Entities.FillInTheBlank", "FillInTheBlank")
                        .WithMany("Sentences")
                        .HasForeignKey("FillInTheBlankId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FillInTheBlank");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("IELTSExamPlatform.CORE.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("IELTSExamPlatform.CORE.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IELTSExamPlatform.CORE.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("IELTSExamPlatform.CORE.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IELTSExamPlatform.CORE.Entities.BooleanQuestion", b =>
                {
                    b.HasOne("IELTSExamPlatform.CORE.Entities.ReadingPassage", null)
                        .WithMany("BooleanQuestions")
                        .HasForeignKey("ReadingPassageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IELTSExamPlatform.CORE.Entities.ChoiceQuestion", b =>
                {
                    b.HasOne("IELTSExamPlatform.CORE.Entities.ReadingPassage", null)
                        .WithMany("ChoiceQuestions")
                        .HasForeignKey("ReadingPassageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IELTSExamPlatform.CORE.Entities.FillInTheBlank", b =>
                {
                    b.HasOne("IELTSExamPlatform.CORE.Entities.ReadingPassage", null)
                        .WithMany("FillInTheBlanks")
                        .HasForeignKey("ReadingPassageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IELTSExamPlatform.CORE.Entities.MatchHeadingsQuestion", b =>
                {
                    b.HasOne("IELTSExamPlatform.CORE.Entities.Heading", "Heading")
                        .WithMany()
                        .HasForeignKey("HeadingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IELTSExamPlatform.CORE.Entities.ReadingPassage", null)
                        .WithMany("MatchHeadingsQuestions")
                        .HasForeignKey("ReadingPassageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Heading");
                });

            modelBuilder.Entity("IELTSExamPlatform.CORE.Entities.Reading", b =>
                {
                    b.Navigation("ReadingPassages");
                });

            modelBuilder.Entity("IELTSExamPlatform.CORE.Entities.ReadingPassage", b =>
                {
                    b.Navigation("BooleanQuestions");

                    b.Navigation("ChoiceQuestions");

                    b.Navigation("FillInTheBlanks");

                    b.Navigation("Headings");

                    b.Navigation("MatchHeadingsQuestions");

                    b.Navigation("ReadingParagrahs");
                });

            modelBuilder.Entity("IELTSExamPlatform.CORE.Entities.Sentence", b =>
                {
                    b.Navigation("Blanks");
                });

            modelBuilder.Entity("IELTSExamPlatform.CORE.Entities.ChoiceQuestion", b =>
                {
                    b.Navigation("QuestionOptions");
                });

            modelBuilder.Entity("IELTSExamPlatform.CORE.Entities.FillInTheBlank", b =>
                {
                    b.Navigation("Sentences");
                });
#pragma warning restore 612, 618
        }
    }
}
